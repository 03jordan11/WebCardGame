@{
    Layout = "_Layout";
}
@model FeudViewModel

@using WebCardGame.Domains;
<div id="messageBox">

    </div>

<button type="button" id="resetButton" class="btn btn-primary btn-group-lg">RESET</button>
<h1 id="title" hidden></h1>
<div id="startSection">
    <div id="startPage" class="row">
        <div id="welcomeMessage" class="col-lg-6">
            <h2 style="text-align: center;">
                Welcome to Feud, a card game about taking all of your opponents cards!
                If You don't know how to play click the rules.
                If you do, select your difficulty and press start
            </h2>
        </div>
    </div>

    <div id="startButtons" class="row">
        <div class="col-lg-6">
            <select id="difficultySelect">
                <option value="Normal">Normal</option>
                <option value="Hard">Hard</option>
            </select>
            <button id="startButton" class="btn btn-secondary btn-lg">START</button>
            <button type="button" id="rulesButton" class="btn btn-info" data-toggle="modal" data-target="#myModal">Rules</button>
        </div>
    </div>
</div>

<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <h2>Setup</h2><br />
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        An entire 52 card deck is split evenly between players. In this case 26 cards each with 2 players.
                    </li>
                    <li class="list-group-item">
                        Each player will draw 5 cards from his "hand" of cards, always keeping five cards in his hand if the deck allows.
                    </li>
                </ul>
                <h2>Playing</h2><br />
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        Each player takes turns playing whichever card in their hand they wish.
                    </li>
                    <li class="list-group-item">
                        Whoever plays the highest card for that turn wins that "round". He then collects the card they played, as well as all cards played by other players.
                    </li>
                    <li class="list-group-item">
                        These cards go into the players "Discard" pile and will be used as their draw deck should they run out of cards to play.
                    </li>
                    <li class="list-group-item">
                        If cards played are of the same value, each opponent will continue to play cards until one person has the highest card. The one with the final highest, wins all the cards played.
                    </li>
                </ul>
                <h2>Winning</h2><br />
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        Once a player runs out of cards in his hand, draw deck, and discard deck, they are out of the game.
                    </li>
                    <li class="list-group-item">
                        If you are the last players with cards in your hand or decks, then you are the winner!
                    </li>
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div hidden id="gameContainer">
    <div id="botArea">
        <div class="botSideCards">
            <div class="col-lg-1 botDecks" id="botDraw"></div>
            <div class="col-lg-1 botDecks" id="botDiscard"></div>
        </div>
        <div class="col-sm-2 botHand" card-value="Gray_back"></div>
        <div class="col-sm-2 botHand" card-value="Gray_back"></div>
        <div class="col-sm-2 botHand" card-value="Gray_back"></div>
        <div class="col-sm-2 botHand" card-value="Gray_back"></div>
        <div class="col-sm-2 botHand" card-value="Gray_back"></div>
    </div>
    <div id="centerBoard">
        <div class="centerCards" id="bot1Selected"></div>
        <div class="centerCards" id="player1Selected"></div>
    </div>
    <div class="row" id="playerHand">
        <div class="col-sm-2 hand" card-value="Gray_back" id="playerCard1"></div>
        <div class="col-sm-2 hand" card-value="Gray_back" id="playerCard2"></div>
        <div class="col-sm-2 hand" card-value="Gray_back" id="playerCard3"></div>
        <div class="col-sm-2 hand" card-value="Gray_back" id="playerCard4"></div>
        <div class="col-sm-2 hand" card-value="Gray_back" id="playerCard5"></div>
        <div class="sideCards">
            <div class="col-lg-1 decks" id="playerDraw">draw</div>
            <div class="col-lg-1 decks" id="playerDiscard">discard</div>
        </div>
        <p class="infoDeck">DRAW</p>
        <p class="infoDeck">DISCARD</p>
    </div>
</div>
<style>
    #resetButton{
        position: fixed;
        display: none;
        top: 173px;
    }
    #botDiscard {
        width: 48px;
        height: 70px;
        padding: 1px;
        border: 1px dotted gray;
        position: relative;
        right: 30px;
        top: 40px;
        border-radius: 5px;
    }
    #botDraw {
        width: 48px;
        height: 70px;
        padding: 1px;
        border: 1px dotted gray;
        position: relative;
        left: 18px;
        bottom: 40px;
        border-radius: 5px;
    }
    #playerDiscard {
        width: 48px;
        height: 70px;
        padding: 1px;
        border: 1px dotted gray;
        position: relative;
        right: 30px;
        top: 40px;
        border-radius: 5px;
    }
    #playerDraw {
        width: 48px;
        height: 70px;
        padding: 1px;
        border: 1px dotted gray;
        position: relative;
        left: 18px;
        bottom: 40px;
        border-radius: 5px;
    }
    #messageBox {
        color: black;
        font-weight: bold;
        font-size: 60px;
        text-align: center;
        position: relative;
        text-shadow: 0 -1px 4px #FFF, 0 -2px 10px #ff0, 0 -10px 20px #ff8000, 0 -18px 40px #F00;
        top: 300px;
        left: 250px;
        height: 100px;
        width: 500px;
        z-index: 100;
        text-decoration: underline overline dotted red;
    }

    .infoDeck {
        position: relative;
        top: 5px;
        left: -20px;
        font-family: 'Times New Roman', Times, serif;
        font-size: 25px;
        color: aqua;
        text-decoration: underline overline dotted red;
    }

    #centerBoard {
        position: relative;
        top: 240px;
        left: 460px
    }

    #botArea {
        position: relative;
        top: 40px;
        left: 246px;
    }

    .botSideCards {
        position: relative;
        top: 10px;
    }

    #playerHand {
        position: relative;
        top: 340px;
        left: 350px
    }

    #title {
        font-weight: bold;
        color: black;
        text-shadow: #FFF 0px 0px 5px, #FFF 0px 0px 10px, #FFF 0px 0px 15px, #FF2D95 0px 0px 20px, #FF2D95 0px 0px 30px, #FF2D95 0px 0px 40px, #FF2D95 0px 0px 50px, #FF2D95 0px 0px 75px;
        font-family: 'Times New Roman', Times, serif;
        text-align: center;
        width: 1000px;
        background-color: #300000;
        background-image: url("https://www.transparenttextures.com/patterns/basketball.png");
        border-radius: 5px;
    }

    #startSection {
        position: relative;
        left: -60px;
    }

    body {
        background-color: #00020d;
        background-image: url("https://www.transparenttextures.com/patterns/45-degree-fabric-light.png");
    }

    #difficultySelect {
        position: relative;
        left: 50px;
        top: 50px;
    }

    #startPage {
        position: relative;
        left: 200px;
        top: 150px;
        width: 800px;
        background-color: brown;
        border-radius: 10px;
    }

    #startButton {
        position: relative;
        left: 160px;
        top: 50px;
    }

    #rulesButton {
        position: relative;
        left: 280px;
        top: 50px;
    }

    #startButtons {
        position: relative;
        left: 350px;
        top: 100px;
        width: 600px;
        height: 100px;
        background-color: #b88a00;
        background-image: url("https://www.transparenttextures.com/patterns/cardboard-flat.png");
        border-radius: 100px;
        z-index: -1;
    }

    #welcomeMessage {
        background-image: url("/images/greenfelt.png");
        border-radius: 10px;
        height: 150px;
        width: 900px;
        border: 1px ridge;
    }

    .hand {
        width: 68px;
        height: 100px;
        padding: 1px;
        border: 1px solid black;
        border-radius: 10px;
        background-size: contain;
        z-index: 1000;
    }

    .botHand {
        width: 68px;
        height: 100px;
        padding: 1px;
        border: 1px solid black;
        border-radius: 10px;
        background-size: contain;
        background-image: url("/images/cards/Gray_back.png");
    }

    .botDecks {
        color: black;
        font-size: 25px;
        font-weight: bold;
        font-family: 'Times New Roman', Times, serif;
        font: bold;
        text-align: center;
        background-size: contain;
        background-image: url("images/cards/Gray_back.png");
    }

    .decks {
        color: black;
        font-size: 25px;
        font-weight: bold;
        font-family: 'Times New Roman', Times, serif;
        font: bold;
        text-align: center;
        background-size: contain;
        background-image: url("images/cards/Gray_back.png");
    }

    .sideCards {
        position: relative;
        top: 10px;
    }

    .centerCards {
        width: 68px;
        height: 100px;
        padding: 1px;
        border: 1px solid black;
        border-radius: 10px;
        background-image: url("/images/cards/Gray_back.png");
    }

    #gameContainer {
        width: 1000px;
        height: 700px;
        position: center;
        background-color: #153800;
        background-image: url("https://www.transparenttextures.com/patterns/white-diamond.png");
        border-radius: 10px;
    }
</style>

@section Scripts{


    <script type="text/javascript">

    var deck = [];
    var temp;

    var player = [];
    var playerHand = [];
    var playerDiscard = [];

    var bot1 = [];
    var bot1Hand = [];
    var bot1Discard = [];

    var bot2 = [];
    var bot3 = [];
    //

    //Creating Deck from View Model
    function CreateDeck() {
        @foreach(var item in Model.FeudGame.DrawDeck.Cards)
        {
            @:temp = @Html.Raw(Json.Serialize(item));
            @:deck.push(temp);
        }
    }


    function sleep(milliseconds) {
        var start = new Date().getTime();
        for (var i = 0; i < 1e7; i++) {
            if ((new Date().getTime() - start) > milliseconds) {
                break;
            }
        }
    }

    //Ditributes cards to all players
    //TODO give an argument for num of players
    function DistributeCards() {
        //conditionally check players first
        //THIS DISTRIBUTES CARDS TO ALL PLAYERS
        var x = deck.length
        for (i = 0; i < x; i++) {
            player.push(deck.pop());
            i++;
            bot1.push(deck.pop());
        }
    }

    //Draws card from players deck to his hand
    //TODO give arguemtns for checking hand size and drawing acoordingly
    function PlayerDraw(firstTurn, person) {
        if (person === "player") {
            if (firstTurn === false) {
                playerHand.push(player.pop());
            }
            else {
                for (i = 0; i < 5; i++)
                    playerHand.push(player.pop());
            }
        }
        else if (person === "bot1") {
            if (firstTurn === false) {
                bot1Hand.push(bot1.pop());
            }
            else {
                for (i = 0; i < 5; i++)
                    bot1Hand.push(bot1.pop());
            }
        }

        //THIS DRAWS CARDS FROM PLAYERS DECK TO HIS HAND
        AppendCardImages();
        $("#playerDiscard").text(playerDiscard.length);
        $("#playerDraw").text(player.length);
    }

    function checkValue(card) {
        var temp = card;
        if (card === 1 || card === "1")
            temp = "A";
        else if (card === 11 || card === "11")
            temp = "J";
        else if (card === 12 || card === "12")
            temp = "Q"
        else if (card === 13 || card === "13")
            temp = "K"
        return temp;
    }

    function AppendCardImages() {
        //Might have to toString()

        $("#playerCard1").attr("card-value",playerHand[0].value + playerHand[0].suit.substring(0, 1));
        $("#playerCard2").attr("card-value",playerHand[1].value + playerHand[1].suit.substring(0, 1));
        $("#playerCard3").attr("card-value",playerHand[2].value + playerHand[2].suit.substring(0, 1));
        $("#playerCard4").attr("card-value",playerHand[3].value + playerHand[3].suit.substring(0, 1));
        $("#playerCard5").attr("card-value",playerHand[4].value + playerHand[4].suit.substring(0, 1));

        $("#playerCard1").css("background-image", "url('images/cards/" + checkValue(playerHand[0].value) + playerHand[0].suit.substring(0, 1) + ".png')");
        $("#playerCard2").css("background-image", "url('images/cards/" + checkValue(playerHand[1].value) + playerHand[1].suit.substring(0, 1) + ".png')");
        $("#playerCard3").css("background-image", "url('images/cards/" + checkValue(playerHand[2].value) + playerHand[2].suit.substring(0, 1) + ".png')");
        $("#playerCard4").css("background-image", "url('images/cards/" + checkValue(playerHand[3].value) + playerHand[3].suit.substring(0, 1) + ".png')");
        $("#playerCard5").css("background-image", "url('images/cards/" + checkValue(playerHand[4].value) + playerHand[4].suit.substring(0, 1) + ".png')");
    }


    //Bot Picks card
    //TODO add logic to pick based on others, and add argument for difficulty level
    function BotPick() {
        if (bot1Hand.length > 0)
            return bot1Hand.pop();
    }

    //Returns number to find card in array from formated string 'card'
    function FindCardInDeck(deck, card) {
        for (i = 0; i < deck.length; i++){
            if(deck[i].suit.substring(0, 1) === card.slice(-1) && deck[i].value.toString() === card.slice(0, -1))
                return i;
        }
        return i;
    }

    function endTurn(winner, cards) {
        for (item in cards) {
            winner.push(cards[item]);
        }
        if(player.length>0)
            PlayerDraw(false, "player");
        if (playerHand.length === 0) { //if player has no more cards in hand, reset from discard
            if (playerDiscard.length === 0) {
                alert("You lost");
                location.reload();
                //end game, ask to play again
            }
            player = playerDiscard;
            playerDiscard = [];
            PlayerDraw(true, "player");
        }

        if(bot1.length>0)
            PlayerDraw(false, "bot1");
        if (bot1Hand.length === 0) {
            if (bot1Discard.length === 0) {
                //end game, you win
            }
            bot1 = bot1Discard;
            bot1Discard = [];
            PlayerDraw(true, "bot1");
        }
    }

    $(document).ready(function () {

        //creates inital deck to play with
        CreateDeck();
        //gives cards to players
        DistributeCards();
        //player and bot draws, set to true so he draws for first turn
        PlayerDraw(true, "player");
        PlayerDraw(true, "bot1");


        $(".hand").on('click', function () {
            //gets value associated with card clicked on
            var playerDisplay = $(this).attr("card-value");
            //gets numerical position related to deck for what card was clicked on, then removes that from the players hand and sets the center to it
            var handPosition = FindCardInDeck(playerHand, playerDisplay);
            var playerVal = playerHand[handPosition];
            playerHand.splice(handPosition, 1);
            var botPick = BotPick();
            $(this).css("background-image", "");

            $("#bot1Selected").attr("card-value", botPick.value + botPick.suit.substring(0, 1));
            $("#bot1Selected").css("background-image", "url('images/cards/" + checkValue(botPick.value) + botPick.suit.substring(0, 1) + ".png')");

            $("#player1Selected").attr("card-value", playerDisplay);
            $("#player1Selected").css("background-image", "url('images/cards/" + checkValue(playerDisplay.slice(0, -1)) + playerDisplay[playerDisplay.length - 1] + ".png')");
            var playerDec, botDec;
            if (playerVal.value === 1)
                playerDec = 14
            else 
                playerDec = playerVal.value;
            if (botPick.value === 1)
                botDec = 14;
            else
                botDec = botPick.value;


            if (playerDec > botDec) {
                endTurn(playerDiscard, [playerVal, botPick]);
                setTimeout(function () {
                    $("#messageBox").text("Your Card Is Higher!");
                    setTimeout(function () {
                        $("#messageBox").text("");
                    }, 1500)
                }, 800)
            }
            else {
                endTurn(bot1Discard, [playerVal, botPick]);
                setTimeout(function () {
                    $("#messageBox").text("Bots Card Is Higher!");
                    setTimeout(function () {
                        $("#messageBox").text("");
                    }, 1500)
                }, 800)
            }
        });

        $("#startButton").on("click", function () {
            $("#startSection").hide();
            $("#title").show();
            $("#gameContainer").show();
            $("#resetButton").show();
        });

        $(".hand").mouseover(function () {
            $(this).css('transform', "scale(1.3)");
        });
        $(".hand").mouseleave(function () {
            $(this).css('transform', "scale(1.0)");
        });
        $("#resetButton").on("click", function () { location.reload();})
    });





    </script>
}