@{
    ViewData["Title"] = "Home Page";
}
@{
    Layout = "_Layout";
}
@model FeudViewModel

@using WebCardGame.Domains;
<h1>Feud</h1>

<div id="gameContainer" style="width:800px; height:600px; border:2px solid gray; position:center">
    <div id="centerBoard" style="position:relative; top: 210px; left: 360px">
            <div  id="player1Selected" style="width:50px; height:70px; padding: 1px; border:1px dotted gray;"></div>
            <div  id="bot1Selected" style="width:50px; height:70px; padding: 1px; border:1px dotted gray;"></div>
    </div>
    <div class="row" id="playerHand" style="position:relative; top: 280px; left: 260px">
        <div class="col-sm-2 hand" id="playerCard1" style="width:50px; height:70px; padding: 1px; border:1px dotted gray;"><img src="https://media.discordapp.net/attachments/154793307967455232/502947778209513473/2cfeb06c3195bafbf56f702ddf871b7886f94ab47e396696851cd8c7dff4d413_1.jpg?width=449&height=537" /></div>
        <div class="col-sm-2 hand" id="playerCard2" style="width:50px; height:70px; padding: 1px; border:1px dotted gray;"><img /></div>
        <div class="col-sm-2 hand" id="playerCard3" style="width:50px; height:70px; padding: 1px; border:1px dotted gray;"><img /></div>
        <div class="col-sm-2 hand" id="playerCard4" style="width:50px; height:70px; padding: 1px; border:1px dotted gray;"><img /></div>
        <div class="col-sm-2 hand" id="playerCard5" style="width:50px; height:70px; padding: 1px; border:1px dotted gray;"><img /></div>
        
        <div class="col-lg-1" id="playerDraw" style="width:50px; height:70px; padding: 1px; border:1px dotted gray; position:relative; left: 20px; bottom:40px">draw</div>
        <div class="col-lg-1" id="playerDiscard" style="width:50px; height:70px; padding: 1px; border:1px dotted gray; position:relative; right: 30px; top:40px">discard</div>
    </div>
   

</div>

@section Scripts{


<script type="text/javascript">
   
    var deck = [];
    var temp;


    var player = [];
    var playerHand = [];
    var playerDiscard = [];

    var bot1 = [];
    var bot1Hand = [];
    var bot1Discard = [];

    var bot2 = [];
    var bot3 = [];

    //Creating Deck from View Model
    function CreateDeck() {
        @foreach(var item in Model.FeudGame.DrawDeck.Cards)
        {
            @:temp = @Html.Raw(Json.Serialize(item));
            @:deck.push(temp);
        }
    }


    function sleep(milliseconds) {
        var start = new Date().getTime();
        for (var i = 0; i < 1e7; i++) {
            if ((new Date().getTime() - start) > milliseconds) {
                break;
            }
        }
    }

    //Ditributes cards to all players
    //TODO give an argument for num of players
    function DistributeCards() {
        //conditionally check players first
        //THIS DISTRIBUTES CARDS TO ALL PLAYERS
        var x = deck.length
        for (i = 0; i < x; i++) {
            player.push(deck.pop());
            i++;
            bot1.push(deck.pop());
        }
    }

    //Draws card from players deck to his hand
    //TODO give arguemtns for checking hand size and drawing acoordingly
    function PlayerDraw(firstTurn, person) {
        debugger;
        if (person === "player") {
            if (firstTurn === false) {
                playerHand.push(player.pop());
            }
            else {
                for (i = 0; i < 5; i++)
                    playerHand.push(player.pop());
            }
        }
        else if (person === "bot1") {
            if (firstTurn === false) {
                bot1Hand.push(bot1.pop());
            }
            else {
                for (i = 0; i < 5; i++)
                    bot1Hand.push(bot1.pop());
            }
        }
        
        //THIS DRAWS CARDS FROM PLAYERS DECK TO HIS HAND
       
        $("#playerCard1").text(playerHand[0].value + playerHand[0].suit.substring(0, 1));
        $("#playerCard2").text(playerHand[1].value + playerHand[1].suit.substring(0, 1));
        $("#playerCard3").text(playerHand[2].value + playerHand[2].suit.substring(0, 1));
        $("#playerCard4").text(playerHand[3].value + playerHand[3].suit.substring(0, 1));
        $("#playerCard5").text(playerHand[4].value + playerHand[4].suit.substring(0, 1));

        $("#playerDiscard").text(playerDiscard.length);
        $("#playerDraw").text(player.length);
    }

    //Bot Picks card
    //TODO add logic to pick based on others, and add argument for difficulty level
    function BotPick() {
        if (bot1Hand.length > 0)
            return bot1Hand.pop();
    }

    //Returns number to find card in array from formated string 'card'
    function FindCardInDeck(deck, card) {
        for (i = 0; i < deck.length; i++){
            if(deck[i].suit.substring(0, 1) === card.slice(-1) && deck[i].value.toString() === card.slice(0, -1))
                return i;
        }
        return i;
    }

    function endTurn(winner, cards) {
        debugger;
        for (item in cards) {
            winner.push(cards[item]);
        }
        if(player.length>0)
            PlayerDraw(false, "player");
        if (playerHand.length === 0) { //if player has no more cards in hand, reset from discard
            if (playerDiscard.length === 0) {
                alert("You lost");
                //end game, ask to play again
            }
            player = playerDiscard;
            playerDiscard = [];
            PlayerDraw(true, "player");
        }

        if(bot1.length>0)
            PlayerDraw(false, "bot1");
        if (bot1Hand.length === 0) {
            if (bot1Discard.length === 0) {
                //end game, you win
            }
            bot1 = bot1Discard;
            bot1Discard = [];
            PlayerDraw(true, "bot1");
        }
    }

    $(document).ready(function () {
        //creates inital deck to play with
        CreateDeck();
        //gives cards to players
        DistributeCards();
        //player and bot draws, set to true so he draws for first turn
        PlayerDraw(true, "player");
        PlayerDraw(true, "bot1");

        $(".hand").on('click', function () {
            //gets value associated with card clicked on
            debugger;
            var playerDisplay = this.innerHTML;
            //gets numerical position related to deck for what card was clicked on, then removes that from the players hand and sets the center to it
            var handPosition = FindCardInDeck(playerHand, this.innerHTML);
            var playerVal = playerHand[handPosition];
            playerHand.splice(handPosition, 1);
            var botPick = BotPick();
            this.innerHTML = "";
            $("#player1Selected").text(playerDisplay);

            $.when($("#bot1Selected").text(botPick.value)).then(function () {
                if (playerVal.value > botPick.value) {
                    sleep(500);
                    alert("Your Card is Higher");
                }
                else {
                    sleep(500);
                    alert("Bot's Card is Higher");
                }
            }).then(function () {
                if (playerVal.value > botPick.value) {
                    endTurn(playerDiscard, [playerVal, botPick]);
                }
                else {
                    endTurn(bot1Discard, [playerVal, botPick]);
                }
                }).then(function () {
                    $("#playerDiscard").text(playerDiscard.length);
                    $("#playerDraw").text(player.length);
                });
        });
    });








</script>
    }