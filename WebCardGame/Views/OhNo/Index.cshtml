@{
	ViewData["Title"] = "Index";
}

@{
	Layout = "_Layout";
}
@model OhNoViewModel

<head>
	<style>
		<link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap/dist/css/bootstrap.min.css"/ >
		<link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.css"/ >
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous" >
	</style>
</head>

@*required scripts*@
<script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js"></script>
<script src="//unpkg.com/babel-polyfill@latest/dist/polyfill.min.js"></script>
<script src="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.js"></script>

<!--Title-->
<div class="title">Oh No, 99!</div>

<!--middle area implementation-->
<div class="midArea">
	<div id="startPage">
		<!--start button-->
		<button type="button" class="btn btn-success" id="startButton">START</button>

		@*dropdown menu for difficulty selection*@
		<div id="DropDowns">
				<!--Select Difficulty DropDown-->
				<label text-size="15">Difficulty:</label>
				<select style="background-color:black; width:100px" id="difficultyChoice">
					<option value="Normal">Normal</option>
					<option value="Hard">Hard</option>
				</select>
		</div>

		<!--dropdown menu for game mode
	<div id="modeDropDown">Mode:<br />
		<select style="background-color:black" id="gameMode">
			<option value="Standard">Standard</option>
			<option value="Standard">Ghost</option>
		</select>
	</div>
		-->
	</div>

	<div id="playingPage">
		<button type="button" class="btn btn-success" id="restartButton">Restart</button>
		<input type="text" id="deckCount"/>
		<div id="cardStack"></div>
		<div id="playerCards">
			<div id="pCard1"></div>
			<div id="pCard2"></div>
			<div id="pCard3"></div>
			<div id="pCard4"></div>
		</div>
	</div>
</div>

<!--footer implementation-->
<div class="footer"></div>

<style>
	.title {
		width: 100%;
		height: 90px;
		background-image: url(https://images.pexels.com/photos/274096/pexels-photo-274096.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260);
		background-size: 550px 180px;
		color: white;
		font-family: monospace;
		font-size: 40px;
		font-weight: bold;
		text-align: center;
		border-style: solid;
		border-width: 1px;
		border-color: black;
		padding-top: 15px;
		margin-top: 5px;
	}

	.midArea {
		width: 100%;
		height: 600px;
		background-color: black;
		background-size: 550px 180px;
		border-style: solid;
		border-width: 1px;
		border-color: black;
		margin-top: 5px;
	}

	#startPage {
		background-image: url(https://images.pexels.com/photos/297507/pexels-photo-297507.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260);
		background-size: 1100px 600px;
		height: 600px;
		width: 100%;
	}

	#playingPage {
		background-size: 1100px 600px;
		height: 600px;
		width: 100%;
	}

	#startButton {
		width: 300px;
		height: 100px;
		margin-top: 250px;
		margin-left: 10%;
		color: yellow;
		font-family: arial;
		font-size: 40px;
		border-radius: 20px;
	}

	#DropDowns {
		font-family: monospace;
		font-size: 15px;
		color: white;
		margin-top: -320px;
		margin-left: 80%;
	}

	#cardStack {
		height: 100px;
		width: 70px;
		border: solid 1px gray;
		border-radius: 10%;
		transform: scale(1.4);
		margin-left: 500px;
		margin-top: 150px;
	}

	#playerCards {
		margin-top: 120px;
		height: 100px;
		width: 100%;
		color: black;
	}

	#pCard1 {
		height: 100px;
		width: 70px;
		margin-left: 450px;
		border: solid 1px gray;
		border-radius: 10%;
		color: black;
		transform: scale(1.4);
	}

	#pCard2 {
		height: 100px;
		width: 70px;
		margin-left: 500px;
		margin-top: -100px;
		border: solid 2px gray;
		border-radius: 10%;
		transform: scale(1.4);
	}

	#pCard3 {
		height: 100px;
		width: 70px;
		margin-left: 550px;
		margin-top: -100px;
		border: solid 2px gray;
		border-radius: 10%;
		transform: scale(1.4);
	}

	#pCard4 {
		height: 100px;
		width: 70px;
		margin-left: 600px;
		margin-top: -100px;
		border: solid 2px gray;
		border-radius: 10%;
		transform: scale(1.4);
	}

	#restartButton {
		width: 150px;
		height: 40px;
		margin-top: 20px;
		margin-left: 20px;
		font-family: monospace;
		font-size: 20px;
		color: yellow;
	}

	#deckCount {
		width: 120px;
		height: 40px;
		margin-left: 840px;
		margin-top: 20px;
		font-family: monospace;
		font-size: 40px;
		color: white;
		background-color: black;
		border-color: black;
	}

	.footer {
		width: 100%;
		height: 90px;
		background-image: url(https://images.pexels.com/photos/274096/pexels-photo-274096.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260);
		background-size: 550px 180px;
		border-style: solid;
		border-width: 1px;
		border-color: black;
		margin-top: 5px;
	}
</style>


@section Scripts{

	<script type="text/javascript">

	//debugger;
	/* DECLARE GLOBAL VARIABLES */
	var player = [];
	var bot1 = [];
	var bot2 = [];
	var bot3 = [];
	var bot4 = [];
	var bot5 = [];

	var deck = [];
	var cardStack = [];
	var ranks = [];
	var numPlayers = 6;
	var difficulty;
	var timerId;
	var startCard;
	var playerChoice;
	var total_value;
	var turn;
	var temp;
	var index;
	var winner = false;
	var pActive = true;
	var b1Active = true;
	var b2Active = true;
	var b3Active = true;
	var b4Active = true;
	var b5Active = true;

	@foreach (var item in Model.OhNoGame.DrawDeck.Cards)
	{
		@:temp = @Html.Raw(Json.Serialize(item));
		@:deck.push(temp);
	}

	/* HIDE PLAYING PAGE */
	$("#playingPage").hide();
	console.log(deck);

	/* BUTTON CLICK FUNCTIONS */
	// Start button at landing page
	$("#startButton").on('click', function() {
		$("#startPage").hide();
		$("#playingPage").show();
		$("#deckCount").prop('disabled',true);
		$("#deckCount").val(0);
		difficulty = $("#difficultyChoice").val();
		console.log("difficulty = " + difficulty);
		gameStart();
	})

	// Restart button at playing page
	$("#restartButton").on('click', function () {
		$("#startPage").show();
		$("#playingPage").hide();
		location.reload();
	})

	// Buttons for cards in player's hand
	$("#pCard1").on('click', pCard1Click);
	$("#pCard2").on('click', pCard2Click);
	$("#pCard3").on('click', pCard3Click);
	$("#pCard4").on('click', pCard4Click);

	// Actions when card 1 is clicked
	function pCard1Click() {
		$("#pCard1").css('transform', 'scale(1.4)');
		$("#pCard2").css('transform', 'scale(1.4)');
		$("#pCard3").css('transform', 'scale(1.4)');
		$("#pCard4").css('transform', 'scale(1.4)');
		playerChoice = 0;
		playerTurn();
		if (difficulty == 'Normal') {
			botsTurnNormal();
		}
		else if (difficulty == 'Hard') {
			botsTurnHard();
		}
	}
	
	// Actions when card 2 is clicked
	function pCard2Click() {
		$("#pCard1").css('transform', 'scale(1.4)');
		$("#pCard2").css('transform', 'scale(1.4)');
		$("#pCard3").css('transform', 'scale(1.4)');
		$("#pCard4").css('transform', 'scale(1.4)');
		playerChoice = 1;
		playerTurn();
		if (difficulty == 'Normal') {
			botsTurnNormal();
		}
		else if (difficulty == 'Hard') {
			botsTurnHard();
		}
	}

	// Actions when card 3 is clicked
	function pCard3Click() {
		$("#pCard1").css('transform', 'scale(1.4)');
		$("#pCard2").css('transform', 'scale(1.4)');
		$("#pCard3").css('transform', 'scale(1.4)');
		$("#pCard4").css('transform', 'scale(1.4)');
		playerChoice = 2;
		playerTurn();
		if (difficulty == 'Normal') {
			botsTurnNormal();
		}
		else if (difficulty == 'Hard') {
			botsTurnHard();
		}
	}

	// Actions when card 4 is clicked
	function pCard4Click() {
		$("#pCard1").css('transform', 'scale(1.4)');
		$("#pCard2").css('transform', 'scale(1.4)');
		$("#pCard3").css('transform', 'scale(1.4)');
		$("#pCard4").css('transform', 'scale(1.4)');
		playerChoice = 3;
		playerTurn();
		if (difficulty == 'Normal') {
			botsTurnNormal();
		}
		else if (difficulty == 'Hard') {
			botsTurnHard();
		}
	}

	/* GAME PREP FOR START */
	function gameStart() {
		dealHands();
		displayCards();
		dealStart();
		displayCardStack();
	}

	/* DEAL HAND TO ALL PLAYERS */
	function dealHands() {
		var count = 0;
		for (i = 0; i < deck.length; i++) {
			if (count < 4) {
				player.push(deck.pop());
				i++;
				bot1.push(deck.pop());
				i++;
				bot2.push(deck.pop());
				i++;
				bot3.push(deck.pop());
				i++;
				bot4.push(deck.pop());
				i++;
				bot5.push(deck.pop());
				count++;
			}
		}
		console.log(player);
		console.log(bot1);
		console.log(bot2);
		console.log(bot3);
		console.log(bot4);
		console.log(bot5);
		//console.log("cards left in deck: " + deck.length);

		$("#deckCount").val(deck.length);
	}

	/* DISPLAY CARDS IN HAND */
	function displayCards() {
		var card = '';
		var cardUrl = '';

		for (i = 0; i < 4; i++) {
			if (player[i] == "00") {
				continue;
			}

			if (player[i].value == 1)
				card = "A" + player[i].suit.charAt(0);
			else
				card = player[i].value + player[i].suit.charAt(0);

			if (card == '-1C' || card == '-1D' || card == '-1H' || card == '-1S') {
				cardUrl = "url('images/cards/" + 'Q' + player[i].suit.charAt(0) + ".png')";
			}
			else if (card == '-10C' || card == '-10D' || card == '-10H' || card == '-10S') {
				cardUrl = "url('images/cards/" + 'J' + player[i].suit.charAt(0) + ".png')";
			}
			else if (card == '0C' || card == '0D' || card == '0H' || card == '0S') {
				cardUrl = "url('images/cards/" + 'K' + player[i].suit.charAt(0) + ".png')";
			}
			else {
				cardUrl = "url('images/cards/" + card + ".png')";
			}
			
			$("#pCard" + (i + 1)).css("background-image", cardUrl);
			//console.log(cardUrl);
		}
	}

	/* DISPLAY CARDS PLAYED ON TABLE */
	function displayCardStack() {
		var topCard = '';
		var tcUrl = '';

		topCard = cardStack[cardStack.length - 1];

		if (topCard.value == 1) {
			tcUrl = "url('images/cards/" + "A" + topCard.suit.charAt(0) + ".png')";
		}
		else if (topCard.value == -10) {
			tcUrl = "url('images/cards/" + "J" + topCard.suit.charAt(0) + ".png')";
		}
		else if (topCard.value == -1) {
			tcUrl = "url('images/cards/" + "Q" + topCard.suit.charAt(0) + ".png')";
		}
		else if (topCard.value == 0) {
			tcUrl = "url('images/cards/" + "K" + topCard.suit.charAt(0) + ".png')";
		}
		else {
			topCard = topCard.value + topCard.suit.charAt(0);
			tcUrl = "url('images/cards/" + topCard + ".png')";
		}

		$("#cardStack").css("background-image", tcUrl);
		//console.log(tcUrl);
	}
	

	/* DEAL STARTING CARD ONTO TABLE */
	function dealStart() {
		startCard = deck.pop();
		while (startCard.value == -10 || startCard.value == -1 || startCard.value == 0) {
			temp = deck.pop();
			deck.push(startCard);
			startCard = temp;
		}
		cardStack.push(startCard);
		total_value = startCard.value;

		$("#deckCount").val(deck.length);
		//console.log("cards left in deck: " + deck.length);
		console.log("start = " + total_value);
	}

	/* DISABLE ALL CLICKS */
	function disableAll() {
		$("#pCard1").off('click');
		$("#pCard2").off('click');
		$("#pCard3").off('click');
		$("#pCard4").off('click');
	}

	/* ENABLE ALL CLICKS */
	function enableAll() {
		// player clicks enabled if there is no winner
		// or player is active
		if (!winner || pActive) {
			$("#pCard1").on('click', pCard1Click);
			$("#pCard2").on('click', pCard2Click);
			$("#pCard3").on('click', pCard3Click);
			$("#pCard4").on('click', pCard4Click);
		}
	}

	/* CHECK IF THERE IS A WINNER */
	function checkWinner() {
		if (ranks.length == 5) 
		{
			winner = true;
			if (!pActive)
				console.log("WINNER IS PLAYER");
			else if (!b1Active)
				console.log("WINNER IS BOT 1");
			else if (!b2Active)
				console.log("WINNER IS BOT 2");
			else if (!b3Active)
				console.log("WINNER IS BOT 3");
			else if (!b4Active)
				console.log("WINNER IS BOT 4");
			else if (!b5Active)
				console.log("WINNER IS BOT 5");
		}
		return;
	}

	/* PLAYER TURN ACTIONS */
	function playerTurn() {
		// Declares and initializes numerical value of card
		var value = player[playerChoice].value;

		// Prompts user for value if player chooses Queen
		if (value == -1) {
			while (1) {
				/* note - currently window prompt; eventually change to buttons? */
				var v = window.prompt("Enter desrired value");

				// Current valid responses - 2, 3, 4, 5, 6, 7, 8, 9, 10, J, K, A
				try {
					if (v != 'J' && v != 'K' && v != 'A') {
						value = parseInt(v);
						break;
					}
					else if (v == 'J') {
						value = -10;
						break;
					}
					else if (v == 'K') {
						value = 0;
						break;
					}
					else if (v == 'A') {
						value = 1;
						break;
					}
				}
				catch (err) {
					// Error message if entered value is invalid
					// While loop will continue until valid value is entered
					alert("Invalid Value. Please enter another value.");
					continue;
				}
			}
		}

		// Total value is updated after adding value of card played
		total_value = total_value + value;

		// Checks if total_value is over 99
		if (total_value > 99) {
			alert("Player loses");
			ranks.push(0);
			total_value -= value;
			console.log("PLAYER OUT");
			disableAll();
			pActive = false;
			checkWinner();
			while (!winner) {
				if (difficulty == 'Normal') {
					botsTurnNormal();
				}
				else if (difficulty == 'Hard') {
					botsTurnHard();
				}
			}
			return;
		}

		// Card of player's choice is removed from player's hand and placed onto table (CardStack)
		// Upon removal of card, another card will be drawn from deck
		cardStack.push(...player.splice(playerChoice, 1)); 
		try {
			player.push(deck.pop());
			$("#deckCount").val(deck.length);
		}
		catch (err)
		{
			player.push("00");
		}

		// Player turn summary outputted to console (developer purposes)
		/* note - add visible turn stats to playing page */
		console.log("player turn: " + "+ " + value + " = " + total_value);

		// Display cards on table
		displayCards();
		displayCardStack();
	}

	/* BOT TURN ACTIONS AT NORMAL DIFFICULTY */
	function botsTurnNormal() {
		// Disable player clicks during bots turn
		if (pActive) {
			disableAll();
			console.log("clicks disabled");

			// Timer set between 4-8 seconds during each bots turn
			// At the end of each timer, next function will be called for next bot's turn
			timerId = setTimeout(bot1Turn, Math.floor(Math.random() * (9000 - 4000)) + 4000);
		}
		else {
			timerId = setTimeout(bot1Turn, Math.floor(Math.random() * (9000 - 4000)) + 4000);
		}
	}
	
	/* CALCULATE BEST QUEEN VALUE FOR BOTS */
	function getQueenValue() {
		if (total_value == 99)
		{
			return 0;
		}

		var ideal = 99 - total_value;
		if (total_value >= 89)
		{
			return ideal;
		}
		
		return 10;
	}
	
	/* CALCULATE BEST CARD TO PLAY IN BOTS HAND */
	function botsCalculated(bot) {
		var highest = 0;
		var num = [];
		var num_found = false;
		for (var i = 0; i < bot.length; i++)
		{
			if ((bot[i].value == -10) || (bot[i].value == -1) || (bot[i].value == 0))
			{
				continue;
			}
			else {
				num_found = true;
				num.push(bot[i]);
			}
		}

		if (!num_found)
		{
			for (var j = 0; j < bot.length; j++)
			{
				if (bot[j].value == 0)
				{
					index = j;
					return 0;
				}
				else if (bot[j].value == -1)
				{
					index = j;
					return getQueenValue();
				}
				else if (bot[j].value == -10)
				{
					index = j;
					return -10;
				}
			}
		}
		else {
			for (var k = 0; k < num.length; k++)
			{
				if ((total_value + num[k].value) <= 99)
				{
					if (num[k].value > highest)
					{
						highest = num[k].value;
					}
				}
			}
		}
		for (var i = 0; i < bot.length; i++)
		{
			if (highest == bot.value)
				index = i;
		}
		return highest;
	}

	// Turn Logic for Bot 1
	function bot1Turn() {
		if (b1Active == true) {
			/* note - change from random to calculated for all bots */
			//var x = Math.floor((Math.random() * 4)); 
			//value = bot1[x].value;
			value = botsCalculated(bot1);
		/*	if (value == -1) {
				while (1) {
					var v = Math.floor((Math.random() * 12)); // gets random value for queen
					try {
						if (v != 11 && v != 12) {
							value = v;
							break;
						}
						else if (v == 11) { //Jack
							value = -10;
							break;
						}
						else if (v == 12) { //King
							value = 0;
							break;
						}
					}
					catch (err) {
						continue;
					}
				}
			}
		*/
			total_value = total_value + value;
			// Checks if total_value is over 99
			if (total_value > 99) {
				alert("Bot 1 loses");
				ranks.push(1);
				console.log("BOT 1 OUT");
				total_value -= value;
				b1Active = false;
				checkWinner();
				timerId = setTimeout(bot2Turn, Math.floor(Math.random() * (9000 - 4000)) + 4000);
				return;
			} 

			cardStack.push(...bot1.splice(index, 1)); 
			try {
				bot1.push(deck.pop()); 
				$("#deckCount").val(deck.length);
			}
			catch (err) {
				bot1.push("00");
			}
			console.log("bot1 turn: " + "+ " + value + " = " + total_value);
			displayCardStack();
			// After timer ends, bot2 turn will start
			timerId = setTimeout(bot2Turn, Math.floor(Math.random() * (9000 - 4000)) + 4000);
		}
		else {
			bot2Turn();
		}
	}

	// Turn Logic for Bot 2
	function bot2Turn() {
		if (b2Active == true) {
		/*	var x = Math.floor((Math.random() * 4));
			value = bot2[x].value;
			if (value == -1) {
				while (1) {
					var v = Math.floor((Math.random() * 12)); // gets random value for queen
					try {
						if (v != 11 && v != 12) {
							value = v;
							break;
						}
						else if (v == 11) { //Jack
							value = -10;
							break;
						}
						else if (v == 12) { //King
							value = 0;
							break;
						}
					}
					catch (err) {
						continue;
					}
				}
			}
		*/
			value = botsCalculated(bot2);
			total_value = total_value + value;
			// Checks if the value is over 99
			if (total_value > 99) {
				alert("Bot 2 loses");
				ranks.push(2);
				console.log("BOT 2 OUT");
				total_value -= value;
				b2Active = false;
				checkWinner();
				timerId = setTimeout(bot3Turn, Math.floor(Math.random() * (9000 - 4000)) + 4000);
				return;
			} 

			cardStack.push(...bot2.splice(index, 1));
			bot2.push(deck.pop());
			console.log("bot2 turn: " + "+ " + value + " = " + total_value);
			displayCardStack();
			// After timer ends, bot3 turn will start
			timerId = setTimeout(bot3Turn, Math.floor(Math.random() * (9000 - 4000)) + 4000);
		}
		else {
			bot3Turn();
		}
	}

	// Turn Logic for Bot 3
	function bot3Turn() {
		if (b3Active == true) {
		/*	var x = Math.floor((Math.random() * 4));
			value = bot3[x].value;
			if (value == -1) {
				while (1) {
					var v = Math.floor((Math.random() * 12)); // gets random value for queen
					try {
						if (v != 11 && v != 12) {
							value = v;
							break;
						}
						else if (v == 11) { //Jack
							value = -10;
							break;
						}
						else if (v == 12) { //King
							value = 0;
							break;
						}
					}
					catch (err) {
						continue;
					}
				}
			}
		*/
			value = botsCalculated(bot3);
			total_value = total_value + value;
			// Checks if the value is over 99
			if (total_value > 99) {
				alert("Bot 3 loses");
				ranks.push(3);
				console.log("BOT 3 OUT");
				total_value -= value;
				b3Active = false;
				checkWinner();
				timerId = setTimeout(bot4Turn, Math.floor(Math.random() * (9000 - 4000)) + 4000);
				return;
			} 

			cardStack.push(...bot3.splice(index, 1));
			bot3.push(deck.pop());
			console.log("bot3 turn: " + "+ " + value + " = " + total_value);
			displayCardStack();
			// After timer ends, bot4 turn will start
			timerId = setTimeout(bot4Turn, Math.floor(Math.random() * (9000 - 4000)) + 4000);
		}
		else {
			bot4Turn();
		}
	}

	// Turn Logic for Bot 4
	function bot4Turn() {
		if (b4Active == true) {
		/*	var x = Math.floor((Math.random() * 4));
			value = bot4[x].value;
			if (value == -1) {
				while (1) {
					var v = Math.floor((Math.random() * 12)); // gets random value for queen
					try {
						if (v != 11 && v != 12) {
							value = v;
							break;
						}
						else if (v == 11) { //Jack
							value = -10;
							break;
						}
						else if (v == 12) { //King
							value = 0;
							break;
						}
					}
					catch (err) {
						continue;
					}
				}
			}
		*/
			value = botsCalculated(bot4);
			total_value = total_value + value; 
			// Checks if the value is over 99
			if (total_value > 99) {
				alert("Bot 4 loses");
				ranks.push(4);
				console.log("BOT 4 OUT");
				total_value -= value;
				b4Active = false;
				checkWinner();
				timerId = setTimeout(bot5Turn, Math.floor(Math.random() * (9000 - 4000)) + 4000);
				return;
			} 

			cardStack.push(...bot4.splice(index, 1));
			bot4.push(deck.pop());
			console.log("bot4 turn: " + "+ " + value + " = " + total_value);
			displayCardStack();
			// After timer ends, bot5 turn will start
			timerId = setTimeout(bot5Turn, Math.floor(Math.random() * (9000 - 4000)) + 4000);
		}
		else {
			bot5Turn();
		}
	}

	// Turn Logic for Bot 5
	function bot5Turn() {
		if (b5Active == true) {
		/*	var x = Math.floor((Math.random() * 4));
			value = bot5[x].value;
			if (value == -1) {
				while (1) {
					var v = Math.floor((Math.random() * 12)); // gets random value for queen
					try {
						if (v != 11 && v != 12) {
							value = v;
							break;
						}
						else if (v == 11) { //Jack
							value = -10;
							break;
						}
						else if (v == 12) { //King
							value = 0;
							break;
						}
					}
					catch (err) {
						continue;
					}
				}
			}
		*/
			value = botsCalculated(bot5);
			total_value = total_value + value;
			// Checks if the value is over 99
			if (total_value > 99) {
				alert("Bot 5 loses");
				ranks.push(5);
				checkWinner();
				console.log("BOT 5 OUT");
				total_value -= value;
				b5Active = false;
				checkWinner();
				return;
			} 

			cardStack.push(...bot5.splice(index, 1));
			bot5.push(deck.pop());
			console.log("bot5 turn: " + "+ " + value + " = " + total_value);
			displayCardStack();
		}
	}

	// actions of bots at hard diffuculty 
	function botsTurnHard() {

	}

	function botsHardLogic(bot) {

	}

	// score hidden
	function ghostMode() {

	}

	</script>

}
