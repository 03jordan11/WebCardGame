@{
	ViewData["Title"] = "Index";
}

@{
	Layout = "_Layout";
}
@model OhNoViewModel

<head>
	<style>
		<link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap/dist/css/bootstrap.min.css"/ >
		<link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.css"/ >
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous" >
	</style>
</head>

@*required scripts*@
<script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js"></script>
<script src="//unpkg.com/babel-polyfill@latest/dist/polyfill.min.js"></script>
<script src="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.js"></script>

<!--Title-->
<div class="title">Oh No, 99!</div>

<!--middle area implementation-->
<div class="midArea">
	<div id="startPage">
		<!--start button-->
		<button type="button" class="btn btn-success" id="startButton">START</button>

		@*dropdown menu for difficulty selection*@
		<div id="DropDowns">
				<!--Select Difficulty DropDown-->
				<label text-size="15">Difficulty: #Players:</label>
				<select style="background-color:black; width:100px" id="difficultyChoice">
					<option value="Easy">Easy</option>
					<option value="Normal">Normal</option>
					<option value="Hard">Hard</option>
				</select>
				<!--Select Number of Players DropDown-->
				<select style="background-color:black; width:80px" id="numPlayersChoice">
					<option value="3">3</option>
					<option value="4">4</option>
					<option value="5">5</option>
					<option value="6">6</option>
				</select>
			</div>
		</div>

		<!--dropdown menu for game mode
	<div id="modeDropDown">Mode:<br />
		<select style="background-color:black" id="gameMode">
			<option value="Standard">Standard</option>
			<option value="Standard">Ghost</option>
		</select>
	</div>
		-->
	</div>

	<div id="playingPage">
		<button type="button" class="btn btn-success" id="restartButton">Restart</button>
		<input type="text" id="winner" />
		<div id="cardStack"></div>
		<div id="playerCards">
			<div id="pCard1"></div>
			<div id="pCard2"></div>
			<div id="pCard3"></div>
			<div id="pCard4"></div>
		</div>
	</div>
</div>

<!--footer implementation-->
<div class="footer"></div>

<style>
	.title {
		width: 100%;
		height: 90px;
		background-image: url(https://images.pexels.com/photos/274096/pexels-photo-274096.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260);
		background-size: 550px 180px;
		color: white;
		font-family: monospace;
		font-size: 40px;
		font-weight: bold;
		text-align: center;
		border-style: solid;
		border-width: 1px;
		border-color: black;
		padding-top: 15px;
		margin-top: 5px;
	}

	.midArea {
		width: 100%;
		height: 600px;
		background-color: black;
		background-size: 550px 180px;
		border-style: solid;
		border-width: 1px;
		border-color: black;
		margin-top: 5px;
	}

	#startPage {
		background-image: url(https://images.pexels.com/photos/297507/pexels-photo-297507.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260);
		background-size: 1100px 600px;
		height: 600px;
		width: 100%;
	}

	#playingPage {
		background-size: 1100px 600px;
		height: 600px;
		width: 100%;
	}

	#startButton {
		width: 300px;
		height: 100px;
		margin-top: 250px;
		margin-left: 10%;
		color: yellow;
		font-family: arial;
		font-size: 40px;
		border-radius: 20px;
	}

	#DropDowns {
		font-family: monospace;
		font-size: 15px;
		color: white;
		margin-top: -320px;
		margin-left: 80%;
	}

	#winner {
		height: 30px;
		width: 900px;
		margin-left: 500px;
		font-family: monospace;
		font-size: 30px;
		color: white;
		background-color: black;
		border-color: black;
	}

	#cardStack {
		height: 100px;
		width: 70px;
		border: solid 1px gray;
		border-radius: 10%;
		transform: scale(1.4);
		margin-left: 500px;
		margin-top: 150px;
	}

	#playerCards {
		margin-top: 120px;
		height: 100px;
		width: 100%;
		color: black;
	}

	#pCard1 {
		height: 100px;
		width: 70px;
		margin-left: 450px;
		border: solid 1px gray;
		border-radius: 10%;
		color: black;
		transform: scale(1.4);
	}

	#pCard2 {
		height: 100px;
		width: 70px;
		margin-left: 500px;
		margin-top: -100px;
		border: solid 2px gray;
		border-radius: 10%;
		transform: scale(1.4);
	}

	#pCard3 {
		height: 100px;
		width: 70px;
		margin-left: 550px;
		margin-top: -100px;
		border: solid 2px gray;
		border-radius: 10%;
		transform: scale(1.4);
	}

	#pCard4 {
		height: 100px;
		width: 70px;
		margin-left: 600px;
		margin-top: -100px;
		border: solid 2px gray;
		border-radius: 10%;
		transform: scale(1.4);
	}

	#restartButton {
		width: 150px;
		height: 40px;
		margin-top: 20px;
		margin-left: 20px;
		font-family: monospace;
		font-size: 20px;
		color: yellow;
	}

	.footer {
		width: 100%;
		height: 90px;
		background-image: url(https://images.pexels.com/photos/274096/pexels-photo-274096.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260);
		background-size: 550px 180px;
		border-style: solid;
		border-width: 1px;
		border-color: black;
		margin-top: 5px;
	}
</style>


@section Scripts{

	<script type="text/javascript">

	//debugger;

	var player = []
	var bot1 = []
	var bot2 = []
	var bot3 = []
	var bot4 = []
	var bot5 = []
	var bot5 = []

	var deck = [];
	var cardStack = [];
	var startCard;
	var temp;
	var difficulty;
	var numPlayers;
	var playerChoice = 0;
	var turn;
	var total_value;

	@foreach (var item in Model.OhNoGame.DrawDeck.Cards)
	{
		@:temp = @Html.Raw(Json.Serialize(item));
		@:deck.push(temp);
	}

	//hide page
	$("#playingPage").hide();

	console.log(deck);

	/* button click functions */

	// start button at landing page
	$("#startButton").on('click', function() {
		$("#startPage").hide();
		$("#playingPage").show();
		$("#winner").prop('disabled', true);
		difficulty = $("#difficultyChoice").val();
		numPlayers = $("#numPlayersChoice").val();
		console.log("difficulty = " + difficulty);
		console.log("number of players: " + numPlayers);
		gameStart();
	})

	// restart button at playing page
	$("#restartButton").on('click', function () {
		$("#startPage").show();
		$("#playingPage").hide();
		location.reload();
	})

	// buttons for cards in player's hand
	$("#pCard1").on('click', pCard1Click);
	$("#pCard2").on('click', pCard2Click);
	$("#pCard3").on('click', pCard3Click);
	$("#pCard4").on('click', pCard4Click);

	function pCard1Click() {
		$("#pCard1").css('transform', 'scale(1.6)');
		$("#pCard2").css('transform', 'scale(1.4)');
		$("#pCard3").css('transform', 'scale(1.4)');
		$("#pCard4").css('transform', 'scale(1.4)');
		playerChoice = 0;
	}
	function pCard2Click() {
		$("#pCard1").css('transform', 'scale(1.4)');
		$("#pCard2").css('transform', 'scale(1.6)');
		$("#pCard3").css('transform', 'scale(1.4)');
		$("#pCard4").css('transform', 'scale(1.4)');
		playerChoice = 1;
	}
	function pCard3Click() {
		$("#pCard1").css('transform', 'scale(1.4)');
		$("#pCard2").css('transform', 'scale(1.4)');
		$("#pCard3").css('transform', 'scale(1.6)');
		$("#pCard4").css('transform', 'scale(1.4)');
		playerChoice = 2;
	}
	function pCard4Click() {
		$("#pCard1").css('transform', 'scale(1.4)');
		$("#pCard2").css('transform', 'scale(1.4)');
		$("#pCard3").css('transform', 'scale(1.4)');
		$("#pCard4").css('transform', 'scale(1.6)');
		playerChoice = 3;
	}

	// start of the game
	function gameStart() {
		dealHands(numPlayers);
		displayCards();
		dealStart();
		displayCardStack();
	}

	// deal Hands to all players
	function dealHands(numPlayers) {
		var count = 0;
		if (numPlayers == 3) {
			for (i = 0; i < deck.length; i++) {
				if (count < 4) {
					player.push(deck.pop());
					i++;
					bot1.push(deck.pop());
					i++;
					bot2.push(deck.pop());
					i++;
					bot3.push(deck.pop());
					count++;
				}
			}
			console.log(player);
			console.log(bot1);
			console.log(bot2);
			console.log(bot3);
		}
		else if (numPlayers == 4) {
			for (i = 0; i < deck.length; i++) {
				if (count < 4) {
					player.push(deck.pop());
					i++;
					bot1.push(deck.pop());
					i++;
					bot2.push(deck.pop());
					i++;
					bot3.push(deck.pop());
					i++;
					bot4.push(deck.pop());
					count++;
				}
			}
			console.log(player);
			console.log(bot1);
			console.log(bot2);
			console.log(bot3);
			console.log(bot4);
		}
		else if (numPlayers == 5) {
			for (i = 0; i < deck.length; i++) {
				if (count < 4) {
					player.push(deck.pop());
					i++;
					bot1.push(deck.pop());
					i++;
					bot2.push(deck.pop());
					i++;
					bot3.push(deck.pop());
					i++;
					bot4.push(deck.pop());
					i++;
					bot5.push(deck.pop());
					count++;
				}
			}
			console.log(player);
			console.log(bot1);
			console.log(bot2);
			console.log(bot3);
			console.log(bot4);
			console.log(bot5);
		}
		else {
			for (i = 0; i < deck.length; i++) {
				if (count < 4) {
					player.push(deck.pop());
					i++;
					bot1.push(deck.pop());
					i++;
					bot2.push(deck.pop());
					i++;
					bot3.push(deck.pop());
					i++;
					bot4.push(deck.pop());
					i++;
					bot5.push(deck.pop());
					i++;
					bot6.push(deck.pop());
					count++;
				}
			}
			console.log(player);
			console.log(bot1);
			console.log(bot2);
			console.log(bot3);
			console.log(bot4);
			console.log(bot5);
			console.log(bot6);
		}
	}

	// display cards in hand
	var pCardId = "#pCard1";
	var card = '';
	var cardUrl = '';
	function displayCards() {
		for (i = 0; i < 4; i++) {
			if (player[i].value == 1)
				card = "A" + player[i].suit.charAt(0);
			else
				card = player[i].value + player[i].suit.charAt(0);

			if (card == '-1C' || card == '-1D' || card == '-1H' || card == '-1S') {
				cardUrl = "url('images/cards/" + 'Q' + player[i].suit.charAt(0) + ".png')";
			}
			else if (card == '-10C' || card == '-10D' || card == '-10H' || card == '-10S') {
				cardUrl = "url('images/cards/" + 'J' + player[i].suit.charAt(0) + ".png')";
			}
			else if (card == '0C' || card == '0D' || card == '0H' || card == '0S') {
				cardUrl = "url('images/cards/" + 'K' + player[i].suit.charAt(0) + ".png')";
			}
			else {
				cardUrl = "url('images/cards/" + card + ".png')";
			}
			
			$("#pCard" + (i + 1)).css("background-image", cardUrl);
			console.log(cardUrl);
		}
	}

	// display card stack
	var topCard = '';
	var tcUrl = '';
	function displayCardStack() {
		topCard = cardStack[cardStack.length - 1]
		console.log(topCard);

		if (cardStack[cardStack.length-1].value == 1)
			topCard = "A" + cardStack[cardStack.length-1].suit.charAt(0);
		else
			topCard = cardStack[cardStack.length - 1].value + cardStack[cardStack.length - 1].suit.charAt(0);

		if (topCard == '-1C' || topCard == '-1D' || topCard == '-1H' || topCard == '-1S') {
			tcUrl = "url('images/cards/" + 'Q' + cardStack[cardStack.length - 1].suit.charAt(0) + ".png')";
		}
		else if (topCard == '-10C' || topCard == '-10D' || topCard == '-10H' || topCard == '-10S') {
			tcUrl = "url('images/cards/" + 'J' + cardStack[cardStack.length - 1].suit.charAt(0) + ".png')";
		}
		else if (topCard == '0C' || topCard == '0D' || topCard == '0H' || topCard == '0S') {
			tcUrl = "url('images/cards/" + 'K' + cardStack[cardStack.length - 1].suit.charAt(0) + ".png')";
		}
		else {
			tcUrl = "url('images/cards/" + topCard + ".png')";
		}
		$("#cardStack").css("background-image", tcUrl);
	}
	

	// deal starting card
	function dealStart() {
		startCard = deck.pop();
		while (startCard.value == -10 || startCard.value == -1 || startCard.value == 0) {
			deck.push(startCard);
			startCard = deck.pop();
		}
		cardStack.push(startCard);
		total_value = startCard.value;

		console.log("start = " + total_value);
	}

	// card play logic
	// play card onto table
	function playCards() {
		if (difficulty == "Easy") {
			difficultyEasy();
		}
		else if (difficulty == "Normal") {
			difficultyNormal();
		}
		else if (difficulty == "Hard") {
			difficultyHard();
		}

		displayCards();
		checkForWin();
		c = 1;
	}


	// disable all clicks
	function disableAll() {
		$("#pCard1").off('click');
		$("#pCard2").off('click');
		$("#pCard3").off('click');
		$("#pCard4").off('click');
	}

	// enable all clicks
	function enableAll() {
		if (!winner) {
			$("#pCard1").on('click', pCard1Click);
			$("#pCard2").on('click', pCard2Click);
			$("#pCard3").on('click', pCard3Click);
			$("#pCard4").on('click', pCard4Click);
		}
	}

	// actions at player's turn
	var value;
	function playerTurn() {
		value = player[playerChoice].value; // value of card to sum
		if (value == -1) { // if card is a queen, prompt user for value
			while (1) {
				//debugger;
				var v = window.prompt("Enter desrired value: (2,3,4,5,6,7,8,9,10,J,K,A)");
				try {
					if (v != 'J' && v != 'K' && v != 'A') {
						value = parseInt(v);
						break;
					}
					else if (v == 'J') {
						value = -10;
						break;
					}
					else if (v == 'K') {
						value = 0;
						break;
					}
					else if (v == 'A') {
						value = 1;
						break;
					}
				}
				catch (err) {
					continue;
				}
			}
			cardStack.push(...player.splice(playerChoice, 1)); // removes card from player's hand and places card onto cardStack
			player.push(deck.pop()); // player draws new card from deck
			total_value = total_value + value; // adds value to total_value
			console.log("+ " + value + " = " + total_value);
			console.log(player);
			console.log(cardStack);
			displayCardStack();
		}
	}

	// actions of bots at easy difficulty (random)
	function botsTurnEasy(n) {
		var i;
		var x;
		for (i = 1; i < n + 1; i++) {
			x = Math.floor((Math.random() * 4)); //get random value b/w 1 and 4
			value = ("bot"+i)[x].value; // value of card to sum
			if (value == -1) { // if card is a queen, prompt user for value
				while (1) {
					//debugger;
					var v = Math.floor((Math.random() * 12)); // gets random value for queen
					try {
						if (v != 11 && v != 12) {
							value = v;
							break;
						}
						else if (v == 11) { //Jack
							value = -10;
							break;
						}
						else if (v == 12) { //King
							value = 0;
							break;
						}
					}
					catch (err) {
						continue;
					}
				}
				cardStack.push(...("bot"+i).splice(x, 1)); // removes card from player's hand and places card onto cardStack
				("bot"+i).push(deck.pop()); // player draws new card from deck
				console.log(cardStack);
				total_value = total_value + value; // adds value to total_value
				console.log("+ " + value + " = " + total_value);
				console.log("bot = " + "bot" + i);
				console.log("bot" + i);
				displayCardStack();
			}
		}
	}

	// actions of bots at normal difficulty (calculated)
	function botsTurnNormal() {

	}

	// actions of bots at hard diffuculty 
	function botsTurnHard() {

	}

	// score hidden
	function ghostMode() {

	}


	function difficultyEasy() {
		// game continues until winner is found
		turn = 1;
		while (!winner) {
			console.log("turn = " + turn); // print turn number
			playerTurnEasy();
			botsTurnEasy(numPlayers - 1);
			turn += 1;
		}

	}

	function difficultyNormal() {
		turn = 1;
		while (!winnder) {
			console.log("turn = " + turn);
			playerTurn();
			botsTurnNormal(numPlayers - 1);
			turn += 1;
		}
	}

	function difficultyHard() {
		turn = 1;
		while (!winner) {
			console.log("turn + " + turn);
			playerTurnHard();
			botsTurnHard(numPlayers - 1);
			turn += 1;
		}
	}

	</script>

}
